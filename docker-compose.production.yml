version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # CockroachDB Cluster (3 nodes for replication)
  cockroach1:
    image: cockroachdb/cockroach:latest
    container_name: crdb-node1
    hostname: crdb-node1
    networks:
      app-network:
        ipv4_address: 172.25.0.10
    volumes:
      - cockroach1:/cockroach/cockroach-data
    environment:
      - COCKROACH_CACHE_SIZE=256MiB
      - COCKROACH_MAX_SQL_MEMORY=256MiB
    command: start --insecure --store=/cockroach/cockroach-data --listen-addr=0.0.0.0:26257 --http-addr=0.0.0.0:8080 --advertise-addr=crdb-node1:26257 --join=crdb-node1:26257,crdb-node2:26257,crdb-node3:26257 --cache=256MiB --max-sql-memory=256MiB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  cockroach2:
    image: cockroachdb/cockroach:latest
    container_name: crdb-node2
    hostname: crdb-node2
    networks:
      app-network:
        ipv4_address: 172.25.0.11
    volumes:
      - cockroach2:/cockroach/cockroach-data
    environment:
      - COCKROACH_CACHE_SIZE=256MiB
      - COCKROACH_MAX_SQL_MEMORY=256MiB
    command: start --insecure --store=/cockroach/cockroach-data --listen-addr=0.0.0.0:26257 --http-addr=0.0.0.0:8080 --advertise-addr=crdb-node2:26257 --join=crdb-node1:26257,crdb-node2:26257,crdb-node3:26257 --cache=256MiB --max-sql-memory=256MiB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  cockroach3:
    image: cockroachdb/cockroach:latest
    container_name: crdb-node3
    hostname: crdb-node3
    networks:
      app-network:
        ipv4_address: 172.25.0.12
    volumes:
      - cockroach3:/cockroach/cockroach-data
    environment:
      - COCKROACH_CACHE_SIZE=256MiB
      - COCKROACH_MAX_SQL_MEMORY=256MiB
    command: start --insecure --store=/cockroach/cockroach-data --listen-addr=0.0.0.0:26257 --http-addr=0.0.0.0:8080 --advertise-addr=crdb-node3:26257 --join=crdb-node1:26257,crdb-node2:26257,crdb-node3:26257 --cache=256MiB --max-sql-memory=256MiB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # CockroachDB Cluster Initializer
  roach-init:
    image: cockroachdb/cockroach:latest
    container_name: roach-init
    networks:
      - app-network
    depends_on:
      cockroach1:
        condition: service_healthy
      cockroach2:
        condition: service_healthy
      cockroach3:
        condition: service_healthy
    command: init --insecure --host=crdb-node1:26257
    restart: "no"

  # Database Setup (Create databases for each microservice)
  database-setup:
    image: cockroachdb/cockroach:latest
    container_name: database-setup
    networks:
      - app-network
    depends_on:
      - roach-init
    command: >
      sql --insecure --host=crdb-node1:26257 --execute="
      CREATE DATABASE IF NOT EXISTS ms_usuarios;
      CREATE DATABASE IF NOT EXISTS ms_eventos;
      CREATE DATABASE IF NOT EXISTS ms_tickets;
      CREATE DATABASE IF NOT EXISTS ms_notifications;
      ALTER RANGE default CONFIGURE ZONE USING num_replicas = 3, gc.ttlseconds = 90000;
      SET CLUSTER SETTING kv.range_merge.queue_interval = '1m';
      SET CLUSTER SETTING kv.range_split.by_load.enabled = false;"
    restart: "no"

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    networks:
      app-network:
        ipv4_address: 172.25.0.20
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # MICROSERVICES
  # =============================================================================

  # MS-USUARIOS (Authentication & Authorization)
  ms-usuarios:
    build:
      context: ./ms-usuarios
      dockerfile: Dockerfile
    container_name: ms-usuarios
    networks:
      app-network:
        ipv4_address: 172.25.0.30
    environment:
      NODE_ENV: production
      PORT: 3010
      DATABASE_URL: postgresql://root@crdb-node1:26257/ms_usuarios?sslmode=disable
      JWT_SECRET: tickets-jwt-secret-super-secreto-2025
      DB_DIALECT: postgres
    depends_on:
      database-setup:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3010/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MS-EVENTOS (Events Management)
  ms-eventos:
    build:
      context: ./ms-eventos
      dockerfile: Dockerfile
    container_name: ms-eventos
    networks:
      app-network:
        ipv4_address: 172.25.0.31
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://root@crdb-node1:26257/ms_eventos?sslmode=disable
      JWT_SECRET: tickets-jwt-secret-super-secreto-2025
      DB_DIALECT: postgres
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672/
    depends_on:
      database-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MS-TICKETS (Ticket Sales & Orders)
  ms-tickets:
    build:
      context: ./ms-tickets
      dockerfile: Dockerfile
    container_name: ms-tickets
    networks:
      app-network:
        ipv4_address: 172.25.0.32
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://root@crdb-node1:26257/ms_tickets?sslmode=disable
      JWT_SECRET: tickets-jwt-secret-super-secreto-2025
      DB_DIALECT: postgres
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672/
      FRONTEND_URL: http://frontend:3000
    depends_on:
      database-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      ms-eventos:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MS-NOTIFICATIONS (Email & Push Notifications)
  ms-notifications:
    build:
      context: ./ms-notifications
      dockerfile: Dockerfile
    container_name: ms-notifications
    networks:
      app-network:
        ipv4_address: 172.25.0.33
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://root@crdb-node1:26257/ms_notifications?sslmode=disable
      JWT_SECRET: tickets-jwt-secret-super-secreto-2025
      DB_DIALECT: postgres
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672/
      # Email configuration (configure based on your SMTP provider)
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
    depends_on:
      database-setup:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/status', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # API GATEWAY
  # =============================================================================

  # Kong API Gateway
  kong:
    image: kong:3.4-alpine
    container_name: kong-gateway
    networks:
      app-network:
        ipv4_address: 172.25.0.40
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_ADMIN_GUI_URL: 'http://localhost:8002'
    volumes:
      - ./gateway/kong/kong-production.yml:/opt/kong/kong.yml:ro
    depends_on:
      ms-usuarios:
        condition: service_healthy
      ms-eventos:
        condition: service_healthy
      ms-tickets:
        condition: service_healthy
      ms-notifications:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # FRONTEND (Only service exposed to external)
  # =============================================================================

  # Next.js Frontend (ONLY EXPOSED PORT 709)
  frontend:
    build:
      context: ./ticket-slave-frontend
      dockerfile: Dockerfile
    container_name: ticket-slave-frontend
    networks:
      app-network:
        ipv4_address: 172.25.0.50
    ports:
      - "709:3000"  # ONLY EXPOSED PORT
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://kong-gateway:8000
      NEXT_PUBLIC_FRONTEND_URL: http://localhost:709
    depends_on:
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  cockroach1:
  cockroach2:
  cockroach3:
  rabbitmq_data: